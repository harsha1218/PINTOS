		    +---------------------------+
		    |             OS            |
		    | PROJECT 3: VIRTUAL MEMORY |
		    |      DESIGN DOCUMENT      |
		    +---------------------------+

---- GROUP 20 ----

>> Fill in the names, email addresses and matriculation numbers of your group members.

Rithik Maligi <rithik.maligi@iitgn.ac.in> 19110098
GB Harsha Vardhan <gbh.vardhan@iitgn.ac.in> 19110083
Jayasurya Nalamolu <jaya.svn@iitgn.ac.in> 19110095

---- PRELIMINARIES ----

>> If you have any preliminary comments on your submission, notes for the
>> TAs, or extra credit, please give them here.

>> Please cite any offline or online sources you consulted while
>> preparing your submission, other than the Pintos documentation, course
>> text, lecture notes, and course staff.

			PAGE TABLE MANAGEMENT
			=====================

---- DATA STRUCTURES ----

>> A1: Copy here the declaration of each new or changed `struct' or
>> `struct' member, global or static variable, `typedef', or
>> enumeration.  Identify the purpose of each in 25 words or less.

struct thread
{
  struct hash pt_suppl;         
  struct lock pt_suppl_lock;   
};


struct pt_suppl_file_info
{
  struct file *file;
  struct thread *owner;
  int map_id;
  off_t offset;
  uint32_t read_bytes;
  uint32_t zero_bytes;
  bool writable;
};

Entry into MM files: It is incorporated into the supplemental page table and is designed to be non-NULL if the page is for a MM file.


---- ALGORITHMS ----

>> A2: In a few paragraphs, describe your code for locating the frame,
>> if any, that contains the data of a given page.

We access the  null value in the hash table indexed by page for frame table.

>> A3: How does your code coordinate accessed and dirty bits between
>> kernel and user virtual addresses that alias a single frame, or
>> alternatively how do you avoid the issue?

We also access the frame with the user's vaddr also during system calls to avoid this problem.

---- SYNCHRONIZATION ----

>> A4: When two user processes both need a new frame at the same time,
>> how are races avoided?

The structure frame_hash_lock is used to handle this case.

---- RATIONALE ----

>> A5: Why did you choose the data structure(s) that you did for
>> representing virtual-to-physical mappings?

While doing the mapping we would like to ensure the process to be as fast as possible.
basically it would be better if we have O(1) complexity so we used hash table in our algorithm.
We mainly access the table by indexing by page and this data structure is better suitable.
The distinguishing between the pages in the page table has been done by less function as a case split.



		       PAGING TO AND FROM DISK
		       =======================

---- DATA STRUCTURES ----

>> B1: Copy here the declaration of each new or changed `struct' or
>> `struct' member, global or static variable, `typedef', or
>> enumeration.  Identify the purpose of each in 25 words or less.

#define MAX_STACK (8 * (1<<20)); //8MB
Max stack constant


static struct hash frame_hash;
static struct lock frame_hash_lock; 

struct frame_entry
{
  void *page;
  struct thread *owner;
  void *thread_vaddr;

  struct hash_elem elem;
};
Entry in the frame table

---- ALGORITHMS ----

>> B2: When a frame is required but none is free, some frame must be
>> evicted.  Describe your code for choosing a frame to evict.

We used clock algorithm here to evict the frame. Here in frame table we inspect the frame table circularly
and then the accessed bit in the pagedir is evicted according to the algorithm.

>> B3: When a process P obtains a frame that was previously used by a
>> process Q, how do you adjust the page table (and any other data
>> structures) to reflect the frame Q no longer has?
In such case we will generally prefer to shift the frame to disc.
if the page does belong to mmap file then it would be written to the file.
Consequently the the status of the page will also be changed and entry of the page in pagedir is changed.
LAZY_SWAPPED or MMF_UNLOADED these two data structures performs the above described work.
Atlast the frame table entry would change from 'q' to 'p'.

>> B4: Explain your heuristic for deciding whether a page fault for an
>> invalid virtual address should cause the stack to be extended into
>> the page that faulted.
if the PHYS_BASE has been checked then the stack will be extended 
if the invalid virtual address does not exceed the stack pointer by more 
than 32 bytes.

---- SYNCHRONIZATION ----

>> B5: Explain the basics of your VM synchronization design.  In
>> particular, explain how it prevents deadlock.  (Refer to the
>> textbook for an explanation of the necessary conditions for
>> deadlock.)
different locks are used in this vm synchronization to avoid the deadlock condition and they are mentioned below.
Swap Lock (SL)
Frame Lock (FL)
File system Lock ( FSL)
Local suppl page table lock(PTL)
So to prevent the possibility of deadlock,we eliminate the possibility of a loop in the dependency cycle.
One possible order of arrangment is
- FL -> SL -> FSL -> PTL
- SL -> FSL -> PTL
- FSL -> PTL
- PTL

>> B6: A page fault in process P can cause another process Q's frame
>> to be evicted.  How do you ensure that Q cannot access or modify
>> the page during the eviction process?  How do you avoid a race
>> between P evicting Q's frame and Q faulting the page back in?
We know that there will not be two evictions at same instance.Then we need to worry about 
page accessing and page fault .Since, when swapping,
the address is removed from the pagedir, we only need to face concurrent
page faults and evictions.


>> B7: Suppose a page fault in process P causes a page to be read from
>> the file system or swap.  How do you ensure that a second process Q
>> cannot interfere by e.g. attempting to evict the frame while it is
>> still being read in?
Th eprocess needs to have both frame lock and swap lock to perform the eviction.
So in this scenario Q cannot evict the page since P will be holding the frame lock.

>> B8: Explain how you handle access to paged-out pages that occur
>> during system calls.  Do you use page faults to bring in pages (as
>> in user programs), or do you have a mechanism for "locking" frames
>> into physical memory, or do you use some other design?  How do you
>> gracefully handle attempted accesses to invalid virtual addresses?


---- RATIONALE ----

>> B9: A single lock for the whole VM system would make
>> synchronization easy, but limit parallelism.  On the other hand,
>> using many locks complicates synchronization and raises the
>> possibility for deadlock but allows for high parallelism.  Explain
>> where your design falls along this continuum and why you chose to
>> design it this way.
In our vm design,we already mentioned that we could tack the problem of deadlock situation with the 
given locks. That mean VM is synchronized with (num_thread+3) locks.We chose this because of parallelism.
Even though it is a bit challenging ,the challenges were crossed and avoided the sequential handling of VM.


			 MEMORY MAPPED FILES
			 ===================

---- DATA STRUCTURES ----

>> C1: Copy here the declaration of each new or changed `struct' or
>> `struct' member, global or static variable, `typedef', or
>> enumeration.  Identify the purpose of each in 25 words or less.

Entry in the supplemental page table

Entry in the supplemental page table

struct pt_suppl_file_info
{
  struct file *file;
  struct thread *owner;
  int map_id;
  off_t offset;
  uint32_t read_bytes;
  uint32_t zero_bytes;
  bool writable;
};

struct pt_suppl_entry
{
  void *vaddr;
  enum pt_status status;
  size_t swap_slot;
  struct pt_suppl_file_info *file_info;

  struct hash_elem elem;
};



---- ALGORITHMS ----

>> C2: Describe how memory mapped files integrate into your virtual
>> memory subsystem.  Explain how the page fault and eviction
>> processes differ between swap pages and other pages.

The files are stored in the supplement page tabel just like the lazy loaded pages. During mmapping an entry is created for each page of the file and set to 
Unloades Status. During page fault actaul reading is done.

The field "file-info" is non-NULL if the page is for a memory mapped file. While swapping, the page is written to disk rather than swap partition. 

>> C3: Explain how you determine whether a new file mapping overlaps
>> any existing segment.


In page.c, everytime a mapping is made, we check if the page of any process is mapped to that address. If the mapping exists, mmap fails.


---- RATIONALE ----

>> C4: Mappings created with "mmap" have similar semantics to those of
>> data demand-paged from executables, except that "mmap" mappings are
>> written back to their original files, not to swap.  This implies
>> that much of their implementation can be shared.  Explain why your
>> implementation either does or does not share much of the code for
>> the two situations.

The differnec is in the case split in frame.c and all other are same. The frame can be a normal frame or a frame of memory mapped file.
Everything else is shared, and this is also thanks to the fact that we keep both type of entries in per-thread table. 

			   SURVEY QUESTIONS
			   ================

Answering these questions is optional, but it will help us improve the
course in future quarters.  Feel free to tell us anything you
want--these questions are just to spur your thoughts.  You may also
choose to respond anonymously in the course evaluations at the end of
the quarter.

>> In your opinion, was this assignment, or any one of the three problems
>> in it, too easy or too hard?  Did it take too long or too little time?

>> Did you find that working on a particular part of the assignment gave
>> you greater insight into some aspect of OS design?

>> Is there some particular fact or hint we should give students in
>> future quarters to help them solve the problems?  Conversely, did you
>> find any of our guidance to be misleading?

>> Do you have any suggestions for the TAs to more effectively assist
>> students, either for future quarters or the remaining projects?

>> Any other comments?
